# Tatiana Kletsovka
# \033[0;__;__m \033[m   or   \033[1;__;__m \033[m
# print('#' * 115)      # Для разделения блоков на листе с кодом:
""" ################################################################################################################
 07.04.25
 Python 68-69: Work with Network.
 ################################################################################################################### """

# Video Lesson 68-69: ------------.
# Video Practice __: wasn't.
# links:
#   - Presentation:
#   -
#   -
#
# def input_numb_list():
#     numb_list = [int(x) for x in input('Enter a list of numbers separated by space: ').split()]
#     return numb_list
# ------------------------ SHORTCUTS ------------------------
# Ctrl + W - выделить текущий блок. если нажимать это сочетание дальше, то будут выделяться родительские блоки.
# Ctrl+Y - Удаление всей строки. Кстати, команда копирования Ctrl+C без выделения также работает для всей строки.
# Ctrl+Akt+L / Alt+Enter - Привести код к принятым стандартам (для Python - PEP8).
# Ctrl+R — Изменить название класса/функции и т. п. по всему проекту.
# Ctrl+Shift + F - Найти по всем файлам.
# Shift + F6 - заменить имя элемента во всех частях во всех файлах.
# -----------------------------------------------------------

print('.' * 120)

""" ___________________________________  Review of previously covered material  ___________________________________ """

# Video 68,

""" \\\\__ NB! __   isinstance(<object>, <type of data>)  -->  ПРОВЕРКА типа данных перед выполнением операций!!! """
# num = 3
# if isinstance(num, int):
#     print(num + 2)


""" %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%_____________     HTTP, URL, DNS     ____________%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% """
# Video 68, 20:00

""" ___ Протокол ___ """
#  - набор правил и соглашений, определяющих формат и последовательность обмена данных между
#    устройствами в компьютерных сетях.
# Протокол обеспечивает стандартизацию взаимодействия между устройствами и позволяет им эффективно обмениваться
# информацией, таким образом, обеспечивая согласованность и надежность передачи данных.

""" __________ Протокол HTTP __________ """
# — это набор правил и соглашений, которые используются для передачи данных между клиентами
#   и веб-серверами в интернете, поддерживают запросы клиента к серверу и ответы сервера на эти запросы.
"""  HTTP  -  Hypertext Transfer Protocol """
#       ● Является основным протоколом для обмена данными в Интернете.
#       ● Определяет структуру и правила взаимодействия между клиентом и сервером.
#       ● Используется для передачи гипертекстовых документов.

""" __ NB! __ - ПОСМОТЕРТЬ что такое "гипертекстовый документ"  """


""" __________ Протокол URL __________ """
# — это адрес, который определяет местоположение ресурса в интернете, используется для обозначения точного
# пути к ресурсу и позволяет пользователям и программам легко находить и получать доступ к этому ресурсу.
"""  URL  -  Uniform Resource Locator  """
# https://blog.example.com/subtopic/blog-post
#       ● https --> Протокол
#       ● blog --> Поддомен.
#       ● example --> Домен.
#       ● com --> Домен верхнего уровня.
#       ● subtopic --> Подкаталог.
#       ● blog-post --> Слаг.
# Якорь

""" __________ DNS __________ """
# — система доменных имен, которая предоставляет механизм преобразования удобочитаемых имен доменов в
#   IP-адреса, которые используются для связи с серверами.
"""  DNS  -  Domain Name System """


""" __________ HTTP-запрос __________ """
#       ● Метод запроса.
#       ● URL ресурса.
#       ● Заголовки запроса.
#       ● Тело запроса.
""" __________ HTTP-ответ __________ """
#       ● Код состояния.
#       ● Заголовки ответа.
#       ● Тело ответа, которое содержит данные, отправленные сервером.


""" %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%___________    Библиотека requests    __________%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% """

# — это библиотека для работы с HTTP-запросами и HTTP-ответами в Python. Обеспечивает удобный и простой
# интерфейс для отправки запросов на серверы, обработки ответов и выполнения различных операций с веб-ресурсами.

""" __ NB! __ """   # Для установки пакета requests в консоли в строке ввести команду:
# pip install requests

# # +++++++++++++++
# import requests
# # +++++++++++++++
# response = requests.get("https://example.com")
# print(type(response))
# print(response.status_code)         # Выводит код состояния ответа
# print(response.text)                # Выводит данные, полученные от сервера
# print(response.url)
# print(response.content)
#
# response2 = requests.get('https://httpbin.org/get')
# print(response2.status_code)
# print(response2.headers)
# # print(response2.text)
# print(response2.json())
# print(response2.json()['origin'])


""" __________ Код состояния __________ """
# Основные поля ответа на запрос через requests включают код состояния (status code), который указывает
# на успешность или ошибку выполнения запроса:
#       ● 200 (OK).
#       ● 404 (Not Found).
#       ● 500 (Internal Server Error).

# # +++++++++++++++
# import requests
# # +++++++++++++++
# response = requests.get("https://example.com")
# print(response.status_code)       # Выводит код состояния ответа (200 - успешный запрос)
# print(response.headers)           # Выводит заголовки ответа

""" %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%_____________    API, Cookie    ____________%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% """

""" __________ API __________ """
# — это набор определенных правил и протоколов, которые позволяют различным приложениям взаимодействовать между собой.

"""  API  -  Application Programming Interface  """
#       ● Отправка HTTP-запросов на определенные URL-адреса.
#       ● Обработка полученных ответов.
#       ● Взаимодействие с данными, предоставляемыми API.


""" __________ JSON __________ """
# — текстовый формат обмена данными, который применяется в веб-приложениях как для обмена данными между
#   браузером и сервером, так и между серверами.

# # +++++++++++++++
# import requests
# # +++++++++++++++
# response = requests.get("https://api.github.com/users/github")
# data = response.json()
# print(f'<____>.json() - возвращает словарь <key>: <value>:\n', data, '\n', '=' * 70)
# for k, v in data.items():
#     print(f"{k}: {v}")

""" __________ Cookie __________ """
# — небольшая текстовая информация, которая отправляется сервером и хранится на стороне клиента, используется для
# идентификации пользователя и хранения состояния между запросами.

# # +++++++++++++++
# import requests
# # +++++++++++++++
# # Отправляем запрос, куки должны быть автоматически отправлены ...
# response = requests.get("https://example.com")
# print(response.cookies)                     # Выводит cookie, полученные от сервера
# cookies = {"session_id": "123456789"}
# response = requests.get("https://example.com", cookies=cookies)

# # +++++++++++++++
# import requests
# # +++++++++++++++
# response = requests.get('https://random-data-api.com/api/v2/users?size=10')
# res=response.json()
# l = '15'
# for person in res:
#     # print(person)
#     # print('=' * 70)
#     print(f"{person['last_name']:{l}} {person['first_name']:{l}} {person['email']}")


""" __________ --- __________ """
#       ●
# ___ EXAMPLE __________________________________________________
# ___ END of Example __________________________________________________


""" ______  Task 1  ______________________________________________________________________________________________ """
# ### **Случайный кот**
# **Сервис:** [https://api.thecatapi.com/v1/images/search](https://api.thecatapi.com/v1/images/search)
#
# **Задание:**
# Скачайте случайную картинку кота по URL из ответа и сохраните как `cat.jpg`.

# # +++++++++++++++
# import requests
# # +++++++++++++++
# res = requests.get('https://api.thecatapi.com/v1/images/search')
# # print(res.text)         # Выведет просто ТЕКСТ, т.е. объект текст.
# # print('=' * 70)
# # print(res.json())       # Получаем объект типа списка и словаря, что удобнее читать.
# l = '15'
# data_json = res.json()
# data_img = data_json[0]['url']
# print(data_img)
# print(type(data_img))
# get_img = requests.get(data_img)        # Так мы сохранили содержимое файла в бинарном формате.
# # print(get_img.content)              # .content - сохраняет бинарный формат.
# with open('cat.jpg', 'wb') as f:
#     f.write(get_img.content)

""" ______  Task 2  ______________________________________________________________________________________________ """
# Определите, содержит ли заданная строка набор данных символов [a-z, A-Z и 0-9].

# [a-zA-Z0-9]
# # ++++++++++
# import re
# # ++++++++++
# text = 'Some text'
# symbols = re.search(r'[a-zA-Z0-9]', text, re.IGNORECASE)
# print(symbols)
# is_exists = bool(symbols)
# print(is_exists)

""" ______  Task 3  ______________________________________________________________________________________________ """
# Определите, содержит ли строка символ ‘aʼ, за которым следует 1 или более символов ‘bʼ.

# # ++++++++++
# import re
# # ++++++++++
# text = 'Some text and abrakadabra'
# symbols = re.search(r'a[cb]+', text, re.IGNORECASE)
# print(symbols)
# is_exists = bool(symbols)
# print(is_exists)

""" ______  Task 4  ______________________________________________________________________________________________ """
# Напишите программу, которая удаляет нули (0) перед цифрами в IP адресе. Например, “192.01.001.10ˮ → “192.1.1.10ˮ

# # ++++++++++
# import re
# # ++++++++++
# text = "192.01.001.10"
# new_text = re.sub(r'\b0+', '', text)
# print(new_text)


""" ______  Task 5  ______________________________________________________________________________________________ """
# Определите, содержит ли строка цифры в конце.


""" ______  Task 6  ______________________________________________________________________________________________ """
# Найдите вхождения и позиции подстроки в строке. Пример: строка “Домашние задания, задания в классе, отпускные заданияˮ,
# подстрока “заданияˮ, вывод “заданияˮ на 9:15, “заданияˮ на 18:24, “заданияˮ на 46:52.

# # ++++++++++
# import re
# # ++++++++++
# text = 'Домашние задания, задания в классе, отпускные задания'
# res = re.finditer(r'\bзадания\b', text, flags=re.IGNORECASE)
# for word in res:
#     print(word)
#     print(word.group(0))



""" ______  Task 7  ______________________________________________________________________________________________ """
# **Извлечение IP-адресов**
# Программа должна найти все IPv4-адреса в строке.
# IPv4-адрес состоит из четырёх чисел от 0 до 255, разделённых точками.



