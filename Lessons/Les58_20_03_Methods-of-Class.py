# Tatiana Kletsovka
# \033[0;__;__m \033[m   or   \033[1;__;__m \033[m
# print('#' * 115)      # Для разделения блоков на листе с кодом:
""" ################################################################################################################
 20.03.25
 Python 58: Методы класса.
 ################################################################################################################### """
from collections import defaultdict

# Video Lesson 58: ---------------.
# Video Practice __: wasn't
# links:
#   - Presentation on LMS: https://lms.itcareerhub.de/pluginfile.php/7896/mod_resource/content/2/Python_30_M.pptx%20%281%29.pdf
#   - Классы в Python: https://python-scripts.com/python-class
#   - Python class: как работать с классами, разбор на примерах: https://highload.tech/kak-sozdavat-klassy-v-python-so-znaniem-dela-razbiraem-na-primerah/

# def input_numb_list():
#     numb_list = [int(x) for x in input('Enter a list of numbers separated by space: ').split()]
#     return numb_list
# ------------------------ SHORTCUTS ------------------------
# Ctrl + W - выделить текущий блок. если нажимать это сочетание дальше, то будут выделяться родительские блоки.
# Ctrl+Y - Удаление всей строки. Кстати, команда копирования Ctrl+C без выделения также работает для всей строки.
# Alt+Enter - Привести код к принятым стандартам (для Python - PEP8).
# Ctrl+R — Изменить название класса/функции и т. п. по всему проекту.
# Shift + F6 - заменить имя элемента во всех частях во всех файлах.
# -----------------------------------------------------------

print('.' * 120)

""" ___________________________________  Review of previously covered material  ___________________________________ """
# class PersonNew:
#     def __init__(self, person_name='Bob'):     # Один из МАГИЧЕСКИХ методов. __init__ создает НОВЫЙ объект.
                                                 # Вроде конструктора, но является инициализатором.
                                                 # Переменным класса присваивается значение.
#         print(self)                            # Еще может называться конструктором, но это НЕ верно.
#         print(person_name)
#         self.name = person_name                # self - просто переменная (перекрасить в фиолетовый) - ссылка на сам объект.
#         self.age = 20                          # В ней ВСЕГДА лежит ссылка на ОБЪЕКТ в области памяти.
#     def say_hello(self):                       # __ NB! __  МЕТОД КЛАССА - Video 58!!!, 15:00
#         print(f"Hello, {self.name}!")
#
# my_object = PersonNew("John")
# # print(my_object)
# print(my_object.name)
#
# my_object.say_hello()               # Результат: "Hello, John!"


""" %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%________________   Метод класса   _______________%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% """

# /////////////////////////////
# Смотри примеры кодов у Тани.
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

# — это функция, определенная внутри класса, которая выполняет определенные операции с данными объекта класса.

""" __________ Метода класса VS функция __________ """
# Метода класса, в отличии от обычной функции, автоматически принимает первым аргументом
# ссылку на экземпляр класса (self) и имеет доступ к полям и другим методам объекта.

""" ___ self ___ """
#  — первый аргумент в методах класса, который представляет ссылку на экземпляр класса, для которого
#  вызывается метод. С помощью этого аргумента метод может получать доступ к полям и другим методам объекта.

""" ___  __init__  ___ """
#  — метод, который является конструктором класса и вызывается при создании нового объекта класса.
# Используется для инициализации полей объекта.
# В __init__ можно задать значения по умолчанию для полей, которые будут применяться при создании объекта.

""" ___ Значения по умолчанию в методах ___ """
# Методы класса могут иметь значения по умолчанию для аргументов, что позволяет вызывать методы с определенными
# значениями, но также дает возможность передать аргументы с другими значениями, если необходимо.

""" __________ Статические поля класса __________ """
#  — поля, которые принадлежат классу, а не экземпляру класса. Они могут быть доступны через
# имя класса и не требуют создания экземпляра класса.

# Обращение к статическому полю класса извне:
#   ● При обращении к статическому полю класса можно использовать имя класса или имя объекта класса.
#   ● Рекомендуется использовать имя класса, чтобы подчеркнуть, что это статическое поле и не зависит от
#     конкретного экземпляра.

""" __________  Методы __str__ и __repr__  __________ """

""" __NB! __   Магические методы - работают под капотом """ # Video 58, 37:30.

""" ___   __str__   ___ """
# — метод, который используется для создания "красивого" и информативного представления объекта, которое
#   может быть выведено на печать.

""" ___   __repr__   ___ """        # +++ Video 58, 1:04:00
# REPRESENTATION.
# — метод, который используется для создания представления объекта, которое позволяет точно воссоздать объект.

# class MyClass:
#     def __init__(self, name):
#         self.name = name
#     def __str__(self):
#         return f"MyClass: {self.name}"
#     def __repr__(self):
#         return f"MyClass(name='{self.name}')"
#
# my_object = MyClass("John")
# print(my_object)                    # Результат: "MyClass: John"
# print(repr(my_object))              # Результат: "MyClass(name='John')"

""" __________ isinstance() __________ """
# instance - с англ. СУЩНОСТЬ. Т.е. является ли объект сущностью.
#  — функция, которая позволяет проверить, является ли объект экземпляром определенного класса или его
#   потомком. Возвращает значение True, если объект является экземпляром класса, и False в противном случае.

# ------------------------------ Stanislav M. 11:54
# class Parent:
#     pass
#
# class Child(Parent):
#     pass
# obj = Child()
# print(type(obj) is Parent)
# print(isinstance(obj, Parent))
# --------------------------------------------------



""" %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%______________   Создание класса   _____________%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% """

# Создание своего класса:
#       ● При создании своего класса необходимо определить: его имя, поля, методы и другие атрибуты, которые
#         необходимы для его функционирования.
#       ● Внутри класса можно использовать методы для изменения состояния объекта и выполнения операций с данными.
#       ● Можно использовать наследование для создания подклассов, которые наследуют поля и методы родительского
#         класса и могут добавлять свою уникальную функциональность.





""" ______  Task 1  ______________________________________________________________________________________________ """





