# Tatiana Kletsovka
# \033[0;__;__m \033[m   or   \033[1;__;__m \033[m
# print('#' * 115)      # Для разделения блоков на листе с кодом:
""" ################################################################################################################
 10.04.25
 Python 70:  Многомодульные программы, парсинг веб-страниц.
 ################################################################################################################### """

# Video Lesson 70: ------------.
# Video Practice __: wasn't.
# links:
#   - Presentation:
#   - Облегчаем себе жизнь с помощью BeautifulSoup4: https://habr.com/ru/articles/544828/
#   - Устанавливаем python-пакеты с помощью pip: https://pythonworld.ru/osnovy/pip.html
#
# def input_numb_list():
#     numb_list = [int(x) for x in input('Enter a list of numbers separated by space: ').split()]
#     return numb_list
# ------------------------ SHORTCUTS ------------------------
# Ctrl + W - выделить текущий блок. если нажимать это сочетание дальше, то будут выделяться родительские блоки.
# Ctrl+Y - Удаление всей строки. Кстати, команда копирования Ctrl+C без выделения также работает для всей строки.
# Ctrl+Akt+L / Alt+Enter - Привести код к принятым стандартам (для Python - PEP8).
# Ctrl+R — Изменить название класса/функции и т. п. по всему проекту.
# Ctrl+Shift + F - Найти по всем файлам.
# Shift + F6 - заменить имя элемента во всех частях во всех файлах.
# -----------------------------------------------------------

print('.' * 120)

""" ___________________________________  Review of previously covered material  ___________________________________ """

# Video 68,

""" \\\\__ NB! __   isinstance(<object>, <type of data>)  -->  ПРОВЕРКА типа данных перед выполнением операций!!! """
# num = 3
# if isinstance(num, int):
#     print(num + 2)


""" %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%___________   Модульные программы   __________%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% """
# Video 70, ___

# # ++++++++++
# import math
# # ++++++++++
# print(math.acos(0.1))
# print('Hi')

# Пайтон все файлы с кодом () интерпретирует.
# Компилируются те файлы, которые импортируются. Video 70, 34:00 .... Компиляция - это та же интерпретация... ?????????????
# Например, обратиться к функции можно 2-мя способами:
    # __ 1 Способ __
# import <name of file>  -- выполнится код файла.
# <name of file>.<name of function>()
    # __ 2 Способ __  -- непосредственно импортировать функцию:
# from .Home_Task.HW1_od import <name of function>().

# Video 70, 37:30 -->  обращение в import к скрипту, который лежит в другой папке.
# import Home_Tasks.HW1_od         # ??????????????????????

# Video 70, 36:00
# if __name__ = '__main__':
#     print('Hi')

""" ___ Импорт модуля ___ """
#   Интерпретатор сначала ищет файл с расширением .py.
#       |-->  Если он найден, создает и сохраняет скомпилированный .pyc-файл (байт-код) для более
#             эффективной загрузки модуля.

""" __________ .pyc-файл __________ """
# — это файл, содержащий предварительно скомпилированный код, который интерпретатор может выполнять непосредственно.

""" __________ Пакеты __________ """
# — это способ организации и группировки связанных модулей. Представляют собой директории, которые содержат:
#       - модули и другие пакеты;
#       - файлы __init__.py - указывают интерпретатору, что директория является пакетом.
# В файле __init__.py дополнительно прописываются коды, например, подключение БД.

# Video 70, 49:00  -->  NB!  -  modules / package  ??????????????????????


""" __________ Менеджер пакетов pip __________ """
#   ● pip является инструментом для установки, управления и обновления сторонних пакетов Python.
#   ● С помощью pip можно устанавливать пакеты из репозитория Python Package Index (PyPI) и других источников.

# Установка пакета с помощью pip -- синтаксис:
    # pip install package_name

""" __________ Виртуальное окружение __________ """
# — позволяет изолировать проекты Python и управлять их зависимостями, создается для каждого проекта, и пакеты
#   устанавливаются в него, не затрагивая системную установку Python.

""" __ NB! __ """       # .venv - папка с текущим виртуальным окружением в Пайтоне.
# В консоли вот так (.venv) указывается папка с виртуальным окружением, где лежат интерпретатор, разные модули и т.д.

""" ___ Создание виртуального окружения ___ """         # See Video 70, 1:10:00
# python -m venv myenv
#       ● Активация виртуального окружения (в UNIX-системах):
#           source myenv/bin/activate
#       ● Установка пакетов в виртуальное окружение:
#           pip install package_name
#       ● Деактивация виртуального окружения:
#           deactivate



""" %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%_____________    Парсинг страниц    ____________%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% """

# ___ small Task __________________________________________________
# Запустите в терминале команду:
# pip install bs4
# Когда установка закончится, отправьте в чат скриншот.
# Поясните, что произошло.
# ___ END small Task __________________________________________________

""" __________ Библиотека Beautiful Soup __________ """
# — мощный инструмент для парсинга и обработки HTML- и XML-документов. Позволяет удобно извлекать данные из веб-
#   страниц, навигировать по структуре документа и выполнять различные манипуляции с содержимым.

""" __ NB! __ """   # Detailed INFO here: https://www.crummy.com/software/BeautifulSoup/bs4/doc.ru/bs4ru.html#id11

# # +++++++++++++++++++++++++++++++
# import requests
# from bs4 import BeautifulSoup
# # +++++++++++++++++++++++++++++++
# html = requests.get("https://example.com").text
# # print(html)           # <html> - все что в таких скобках - ТЕГИ.
# # print(type(html))
#
# # ___ Создание объекта Beautiful Soup из HTML-страницы:
# soup = BeautifulSoup(html, "html.parser")
# print(soup)
# print(f'\033[40;33m{'':=<90}\033[m')
# # print(type(soup))

# ___ Извлечение данных из тегов:
# title = soup.title
# links = soup.find_all("a")
# print(title)
# print(title.text)
# print(links)

# ___ Навигация по структуре документа:
# parent = soup.find("div").parent --- NO
# div = soup.find("div")
# print(div)
# print(f'\033[40;36m{'':=<90}\033[m')
# print(div.parent)


# next_sibling = soup.find("div").next_sibling
# # ___ Манипуляции с содержимым:
# new_tag = soup.new_tag("a", href="https://example.com")
# soup.body.append(new_tag)

""" __________ HTML __________   -   Hypertext Markup Language  """
# — это стандартный язык разметки для создания веб-страниц. Определяет структуру и содержимое страницы с помощью
#   тегов, атрибутов и текстового контента.

""" ___ Извлечение данных из сырого HTML --> .find(___) ___ """

# ___ EXAMPLE __________________________________________________ Video 71, 17:00
# # +++++++++++++++++++++++++++++++
# from bs4 import BeautifulSoup
# # +++++++++++++++++++++++++++++++
#
# # ___ Создание объекта Beautiful Soup из сырого HTML. Например, пусть есть страница такого вида:
#         # html ="""
#         # <html>
#         # <body>
#         # <h1>Заголовок</h1>
#         # <p>Текст параграфа</p>
#         # <a href="https://example.com">Ссылка</a>
#         # </body>
# #        |===>
# soup = BeautifulSoup(html, "html.parser")
# # ___ Извлечение заголовка:
# title = soup.find("h1").text
# print(title)
# print(f'\033[40;36m{'':=<90}\033[m')
# # ___ Извлечение текста параграфа:
# paragraph = soup.find("p").text
# print(paragraph)
# print(f'\033[40;34m{'':=<90}\033[m')
# # ___ Извлечение ссылки:
# link = soup.find("a")["href"]
# print(link)
# ___ END of Example __________________________________________________

# ___ small Task __________________________________________________
# Что будет выведено в результате выполнения программы:
# # +++++++++++++++++++++++++++++
# import requests
# from bs4 import BeautifulSoup
# # +++++++++++++++++++++++++++++
# html = requests.get("https://realpython.com").text
# soup = BeautifulSoup(html, "html.parser")
# links = soup.find_all("a")
# for i in links:
#     href = i.attrs.get("href")
#     if href[:4]=="http":
#         print(href)
# ___ END small Task __________________________________________________

""" \\\\\\\\ __ NB! __ //////// """       # Video 71, 41:00 - как извлекать ссылки со страницы или из вебсайта.
# +++++++++++++++++++++++++++++
from bs4 import BeautifulSoup
# +++++++++++++++++++++++++++++

soup = BeautifulSoup('<a href="https://example.com" id="sds">Link</a>'
                     '<a href="https://example2.com" id="1sds">Link2</a>', 'html.parser')
links = soup.find_all('a')
for link in links:
    print(f'\033[40;34mlink -->\033[m {link}')
    print(f'\033[40;36mlink[\'href\'] -->\033[m {link['href']}')
    print(f'\033[40;33mlink[\'id\'] -->\033[m {link['id']}')
print()


""" ___ .find_parent() ___ """      #  — получение родительского элемента -- Video 71, 50:00:
# soup = BeautifulSoup("<div><p>Text</p><p>Text2</p></div>", 'html.parser')
# p = soup.find('p')
# # parent = p.find_parent()
# parent = p.parent
# print(type(parent))
# print(parent.name)
# print(parent)
# child = parent.children         # sibling = geschwister --> братья и сестры родительского тега или предка.
# for ch in child:
#     print(ch)
# print()



""" __________ --- __________ """
#       ●
# ___ EXAMPLE __________________________________________________
# ___ END of Example __________________________________________________


""" ______  Task 1  ______________________________________________________________________________________________ """
#



""" ______  Task 2  ______________________________________________________________________________________________ """
#


""" ______  Task 3  ______________________________________________________________________________________________ """
#


""" ______  Task 4  ______________________________________________________________________________________________ """
#


