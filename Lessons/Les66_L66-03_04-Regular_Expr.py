# Tatiana Kletsovka
# \033[0;__;__m \033[m   or   \033[1;__;__m \033[m
# print('#' * 115)      # Для разделения блоков на листе с кодом:
""" ################################################################################################################
 03.04.25
 Python 66: Regular Expressions.
 ################################################################################################################### """

# Video Lesson 66: ------------.
# Video Practice __: wasn't.
# links:
#   - Presentation: Python_34_M.pptx-Regular_Expressions.pdf
#   - Python RegEx: практическое применение регулярок: https://tproger.ru/translations/regular-expression-python.
#   - Регулярные выражения в Python от простого к сложному: https://habr.com/ru/articles/349860/.
#
# def input_numb_list():
#     numb_list = [int(x) for x in input('Enter a list of numbers separated by space: ').split()]
#     return numb_list
# ------------------------ SHORTCUTS ------------------------
# Ctrl + W - выделить текущий блок. если нажимать это сочетание дальше, то будут выделяться родительские блоки.
# Ctrl+Y - Удаление всей строки. Кстати, команда копирования Ctrl+C без выделения также работает для всей строки.
# Ctrl+Akt+L / Alt+Enter - Привести код к принятым стандартам (для Python - PEP8).
# Ctrl+R — Изменить название класса/функции и т. п. по всему проекту.
# Ctrl+Shift + F - Найти по всем файлам
# Shift + F6 - заменить имя элемента во всех частях во всех файлах.
# -----------------------------------------------------------

print('.' * 120)

""" ___________________________________  Review of previously covered material  ___________________________________ """

# Video 66,



""" %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%____________  Регулярные выражения  ___________%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% """
# Video 66, __
# — это инструмент для работы с текстовыми данными. Позволяют искать и извлекать информацию из строк
#   на основе заданных шаблонов.

# Мотивация использования регулярных выражений включает:
#       ● поиск
#       ● замену
#       ● валидацию
#       ● извлечение данных из текста.

""" __________ Синтаксис регулярных выражений __________ """
# Символы:
    # . (точка) - Любой символ.
    # * - Указывает на ноль или более повторений предыдущего символа или группы символов.
    # + - Одно или более повторений.


""" %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%_______________    Модуль re    ______________%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% """

# re — модуль, который предоставляет различные методы для работы с регулярными выражениями.

""" ___ Наиболее популярные методы: ___ """
    # re.match() -  Ищет совпадение регулярного выражения ТОЛЬКО в НАЧАЛЕ строки.
    # re.search() - Ищет совпадение в ЛЮБОМ месте строки.
    # re.findall() - Возвращает СПИСОК ВСЕХ совпадений.
    # re.split() - Разделяет строку на список подстрок по заданному шаблону.
    # re.sub() - Выполняет замену совпадений на заданную строку или функцию.
    # re.compile() - Компилирует регулярное выражение для повторного использования.

# +++++++++++++
import re
# +++++++++++++
pattern = r"\b\w{3,3}\b"
text = "Hello, how how are you?"
result = re.findall(pattern, text)
print(result)                             # ['how', 'are', ‘you’]

""" __________ Регулярные выражения и обратные ссылки __________ """
#       ● Регулярные выражения позволяют группировать результаты с помощью круглых скобок (...), чтобы
#         извлекать отдельные части совпадений или использовать их для замены.
#       ● Обратные ссылки позволяют ссылаться на группы символов, найденных ранее в выражении.
# Пример:
#   ○ \1 ссылается на первую группу символов.
#   ○ \2 - на вторую и так далее.

# # +++++++++++++
# import re
# # +++++++++++++
# pattern = r"(\b\w+)\s\1"
# text = "hello hello world world"
# print(f'{'-' * 50}\nFind all matches:')
# result = re.findall(pattern, text)
# print(result)                                       # ['hello', 'world']
# print(f'{'-' * 50}\nReplacement of text:')
# replaced_text = re.sub(pattern, r"\1", text)
# print(replaced_text)                                # hello world


""" %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%_____________  Оператор “морж”  :=  ____________%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% """
# — это оператор, который В СОЧЕТАНИИ С МОДЕЛЕМ  re может использоваться для более удобного применения регулярных
#   выражений. Он позволяет объединить поиск и присваивание результата поиска в одном выражении, избежать повторного
#   вызова метода re.search() и сохранить результат поиска в переменную match.

""" ___ +++ Извлечение данных с помощью групп: match.group(__), search.group(__)  ___ """
# +++++++++++++
import re
# +++++++++++++
# text = "Hello, how are you?"
# if match := re.search(r"\b\w{3}\b", text):
#     print("Match found:", match.group(0))
# else:
#     print("No match")

# ___ EXAMPLE __________________________________________________
# text = "Order ID: 12345, Invoice No: 67890"
# # Найдём ID заказа и счёта:
# match = re.search(r"Order ID: (\d+), Invoice No: (\d+)", text)
# if match:
#     print("ID заказа:", match.group(1))
#     print("Номер счёта:", match.group(2))
# ___ END of Example __________________________________________________




""" __________ --- __________ """
#       ●

# ___ EXAMPLE __________________________________________________
# ___ END of Example __________________________________________________


