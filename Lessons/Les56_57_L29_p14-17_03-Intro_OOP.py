# Tatiana Kletsovka
# \033[0;__;__m \033[m   or   \033[1;__;__m \033[m
# print('#' * 115)      # Для разделения блоков на листе с кодом:
""" ################################################################################################################
 17.03.25
 Python 56-57: Introduction to OOP.
 ################################################################################################################### """
from collections import defaultdict

# Video Lesson 56: ---------------.
# Video Practice 57: ---------------.
# links:
#   - Presentation: https://lms.itcareerhub.de/pluginfile.php/7892/mod_resource/content/1/Python_29_M.pptx.pdf
#   - Классы в Python: https://python-scripts.com/python-class.
#   - Как создавать классы в Python: https://highload.tech/kak-sozdavat-klassy-v-python-so-znaniem-dela-razbiraem-na-primerah/.

# def input_numb_list():
#     numb_list = [int(x) for x in input('Enter a list of numbers separated by space: ').split()]
#     return numb_list
# ------------------------ SHORTCUTS ------------------------
# Ctrl + W - выделить текущий блок. если нажимать это сочетание дальше, то будут выделяться родительские блоки.
# Ctrl+Y - Удаление всей строки. Кстати, команда копирования Ctrl+C без выделения также работает для всей строки.
# Alt+Enter - Привести код к принятым стандартам (для Python - PEP8).
# Ctrl+R — Изменить название класса/функции и т. п. по всему проекту.
# Shift + F6 - заменить имя элемента во всех частях во всех файлах.
# -----------------------------------------------------------

print('.' * 120)

""" ___________________________________  Review of previously covered material  ___________________________________ """



""" %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%____________   Объектно-ориентированное   ___________%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
                                                   программирование (ООП)                                           """

""" __________ ООП __________ """
# — парадигма программирования, в которой программа организована вокруг объектов, которые представляют
#   сущности из реального мира или абстрактные концепции.
""" __ NB! __ """ # ООП более обширное, чем функциональное программирование.

# Объекты (“контейнеры”):
#   ● Данные.
#   ● Методы, которые работают с этими данными.

""" __________ ООП VS функциональный подход __________ """
#   ● ООП --> Используется, если требуется моделировать сложные системы с большим количеством
#             взаимодействующих объектов или если требуется повторное использование кода.
#   ● Функциональный подход --> Используется для написания более простых, линейных программ, которые основываются
#             на функциях и передаче данных между ними.

""" __________ Базовые принципы ООП __________ """
#    ● Наследование --> Возможность создания новых классов на основе существующих, данные и методы от
#                       родительского класса. Video 56, 15:00.
# from collections import defaultdict
#    ● Полиморфизм -->  Возможность объектов одного или родственных классов проявлять разные формы поведения в
#                       зависимости от контекста. Video 56, 18:00
#    ● Абстракция -->   Представление объектов в программе в виде абстрактных сущностей с общими
#                       характеристиками и поведением.
#    ● Инкапсуляция --> Сокрытие деталей реализации и предоставление публичного интерфейса
#                       для взаимодействия с объектом.


""" %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%__________   Класс и экземпляр класса   _________%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% """

""" __________ Класс __________ """
# — это шаблон или описание для создания объектов. Класс определяет состояние и поведение объектов,
# которые будут созданы на его основе.

""" __________ Экземпляр класса (объект) __________ """
# — это конкретная реализация класса (шаблона), имеющая свои собственные значения полей и состояние.
# list
a = [1, 2, 3]       # --> Объект класса list.
a.append(3)         # --> Методы - часть класса. Video 56, 26:00


""" ___ class ___ """
# — это ключевое слово, которое используется для определения нового класса в Python.

""" ___ Определение класса  ___ """
#    ● Имя класса --> Следует соглашениям об именовании переменных -- С БОЛЬШОЙ буквы каждое новое слово.
#    ● Тело класса |--> Поля -- информация об объекте. Video 56, 31:00
#                  |--> Методы -- ???????????????? Video 56, 31:00
class MyClass:
    pass

""" ______  Task 1  ______________________________________________________________________________________________ """
# Создать класс и определить объекты этого класса: 2 человека - Том и Боб.
class Person:
    pass
""" __ !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! __ Вспомнить defaultdict """

bob = Person
# print(bob)          # CLASS
bob = Person()
# print(bob)          # OBJECT или ЭКЗЕМПЛЯР класса, не является частью класса - имеет собственный адрес --> Video 55, 38:00
tom = Person()        # т.е. построен на ОСНОВЕ класса.
# print(tom)


""" %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%_______________     Функция dir     _____________%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% """

# Все наследуется от обжекта. Video 56, 40:00.

""" __________ dir __________ """
# — это функция, которая возвращает список имен, определенных в пространстве имен, переданном в качестве аргумента.
# Для класса она возвращает список всех имен, определенных в классе, включая поля и методы.

class MtName:
    pass  # Video 56, 43:00

class MyClass:
 name = "John"
 age = 30
# print(dir(MyClass))
# Результат: ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__',
# '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__',
# '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'age', 'name']

""" __________ Поля в классе __________ """
# — это переменные, определенные внутри класса. Могут быть доступны как через имя класса, так и через имя экземпляра
# класса. Если поле определено в экземпляре класса, то оно будет иметь уникальное значение для каждого экземпляра.

class MyClass:
    class_field = "Class Field"                 # Создает объект и возвращает его -- Video 56, 51:00

my_object = MyClass()                           # Переменная, созданная в классе.
my_object.instance_field = "Instance Field"     """ _NB!_ """  # ?????????????? Video 56, 56:00. -- ТАК ЛУЧШЕ НЕ ДЕЛАТЬ!!! Video 56, 59:00
""" __ NB! __ """  # Через точку можно найти все, что находится в классе: методы и поля.
# print(MyClass.class_field)              # Можно создать поле, т.е. то что содержится в классе -- Результат: "Class Field"
# print(my_object.class_field)            # Можно создать ОБЪЕКТ -- Результат: "Class Field"
# print(my_object.instance_field)         # Результат: "Instance Field"

""" __________________________________ NB! _____   See Video 56, 1:07:00.___________________________ """
# Про обращение к объектам по иерархии в памяти!!!!!

""" %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%_______________     Инкапсуляция     _____________%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% """
# Video 56, 1:15:00
# — это механизм, который позволяет скрыть детали реализации класса и предоставить доступ к полям и методам только
# через публичный интерфейс. Создание экземпляра класса включает вызов конструктора класса с помощью оператора ().

# # Инкапсуляция и создание экземпляра класса:
# class PersonNew:
#     def __init__(self, person_name='Bob'):     # Один из МАГИЧЕСКИХ методов. __init__ создает НОВЫЙ объект.
#         print(self)                            # Еще может называться конструктором, но это НЕ верно.
#         print(person_name)
#         self.name = person_name                # self - просто переменная (перекрасить в фиолетовый) - ссылка на сам объект.
#         self.age = 20                          # В ней ВСЕГДА лежит ссылка на ОБЪЕКТ в области памяти.
#     def say_hello(self):                       # __ NB! __  МЕТОД КЛАССА - Video 58!!!, 15:00
#         print(f"Hello, {self.name}!")
#
# my_object = PersonNew("John")
# # print(my_object)
# print(my_object.name)
#
# my_object.say_hello()               # Результат: "Hello, John!"

# ---------------------------- Example from Tania
# class MyClass:
#     class_field = "Class Field"
#
# my_object1 = MyClass()
# my_object2 = MyClass()
# my_object1.instance_field = "Instance Field"
#
# print(MyClass.class_field)
# print(my_object1.class_field)
# print(my_object1.instance_field)
# print()
#
# print(my_object2.class_field)
# # print(my_object2.instance_field)
# print()
#
# my_object1.class_field = "New"
# print(my_object1.class_field)
# print(my_object2.class_field)
# print(MyClass.class_field)
# print()
#
# MyClass.class_field = "New Class Field"
# print(MyClass.class_field)
# print(my_object1.class_field)
# print(my_object2.class_field)
# ---------------------------------------------------



""" ______  Task 2  ______________________________________________________________________________________________ """
# Video 57, 06:00
# 1. У созданного класса Person посмотреть на уже определенные атрибуты.
# 2. Добавить какие-то поля.
# 3. Создать новый экземпляр класса.
# 4. Обратиться к именам полей через имя экземпляра класса, имя метода.
# 5. Рассмотреть отличия.
# 6. Попробовать изменять различными способами поля.
# 7. Удалить поля разными способами.

# 1 - 3
# class PersonPR:
#
#     field7 = 'value7'
#
#     def __init__(self, person_name, field2):
#         self.name = person_name
#         self.field2 = field2
#         self.field3 = 'default_value'
#
#     def say_hello(self):
#         print(f'Hello, {self.name}')
#
#     def set_field6(self, field6):
#         self.field5 = 'default_value5'
#         self.field6 = field6
#
#     def get_name(self):
#         return self.name
#
#     def change_name(self, new_name):
#         self.name = new_name


""" __ NB! __ """           # СПОСОБЫ чего-то там................
# PersonPR.field1 = 'value1'
# # print(PersonPR.field1)
# person1 = PersonPR('Bob', 'value2')
# person1.field4 = 'value4'
# person1.set_field6('value6')
# # print(person1.field6)

# 4. Обратиться к именам полей через имя экземпляра класса, имя метода.
# def get_name(self):
#     pass
# # print(person1.get_name())

# 6. Попробовать изменять различными способами поля.
# person1.field2 = 'New value2'
# Person.field1 = 'New value1'
# def change_name(self):
#     pass
# person1.change_name('New name')
# person1.say_hello()
#
# PersonPR.change_name(person1, 'New name2')
# person1.say_hello()

# 7. Удалить поля разными способами.
# удаление полей - На практике обычно НЕ используется
# a = 5
# a = None
# del a
# del person1.field5
# del person1


""" ______  Task 3  ______________________________________________________________________________________________ """
# Создать класс Dog для представления собаки. Класс должен иметь атрибуты name (имя) и breed (порода),
# а также метод bark(), который выводит сообщение о том, что собака лает.
# Затем создать экземпляр класса Dog с заданным именем и породой и вызовите метод bark().
#   Ожидаемый вывод:
#   Шарик породы Дворняга лаял.

# class Dog:
#     def __init__(self, name, breed):
#         self.name = name
#         self.breed = breed
#
#     def bark(self):
#         print(f'\033[35m{self.name}\033[m with \033[32m{self.breed}\033[m barked too loud.')
#
# dog_1 = Dog('Sharik', 'Cur')
# dog_1.bark()
# dog_2 = Dog('Muhtar', 'Cur')
# dog_2.bark()


""" ______  Task 4  ______________________________________________________________________________________________ """
# 1. Создать класс Car (машина) со следующими полями: model, year, color.
# 2. Создать 10 объектов этого класса, описывающих модели разных марок, лет и цветов.
# 3. Создать список из этих объектов.
# 4. Написать функцию, которая принимает список объектов класса Car и цвет и возвращает список машин этого цвета.
# Напечатать этот список, выводя название модели, год и цвет. Использовать filter и lambda функции.

class Car:
    def __init__(self, model, year, color):
        self.model = model
        self.year = year
        self.color = color

car1 = Car(1, 2015, 'red')
car2 = Car(2, 2015, 'blue')
car3 = Car(3, 2021, 'green')
car4 = Car(4, 2025, 'purple')
car5 = Car(5, 2024, 'cyan')
car6 = Car(6, 2010, 'red')

car_list = [car1, car2, car3, car4, car5, car6]

def find_car_color(car_list, color):
    car_list_color = []
    for car in car_list:
        if car.color == color:
            car_list_color.append(car)
    return car_list_color

result = find_car_color(car_list, 'red')
for car in result:
    print(car.model, car.year, car.color, sep=', ', end='\n')

""" __NB! __  СКОБКИ - обращение к методу, когда ТОЧКА - обращение к объекту. """

