# Home Work 24, 24.02.25
# ___ 46: Generators. ___
# Video Lesson 46: https://player.vimeo.com/video/1058931605?h=5fb2fe93cb
# Video Practice __: wasn't.
# Normal  \033[0;__;__m \033[m    or   BOLD  \033[1;__;__m \033[m
# print('#' * 115)      # Для разделения блоков на листе с кодом:
# ###################################################################################################################
# f = 40; f = '.' * f; print(f) - Filler up to.
# print(f, f'\n...')
# print(' ' * 5, f'...') - Indentation in the output of the result
# while True:                      # __ NB! __ See HW14_16_01_Func_Tuple.py, Task 2, "___ Clear code..."
#   ...
#   ask = input("\nDo you want to continue? (y/n): ").lower()
#   if ask == 'n':
#   # if user_n == 'Stop'.lower():
#       break
# def input_numb_list():            #  __ NB! __ See HW16_23_01_List_Matrix.py
#     numb_list = [int(x) for x in input('Enter a list of numbers separated by space: ').split()]
#     return numb_list
# ------------------------ SHORTCUTS ------------------------
# Ctrl + W - выделить текущий блок. если нажимать это сочетание дальше, то будут выделяться родительские блоки.
# Ctrl+Y - Удаление всей строки. Кстати, команда копирования Ctrl+C без выделения также работает для всей строки.
# Alt+Enter - Привести код к принятым стандартам (для Python - PEP8).
# Ctrl+R — Изменить название класса/функции и т. п. по всему проекту.
# -----------------------------------------------------------
print('.' * 140)


part_1 = '______ Task 1 _____'
# ______  Task 1  ____________________________________________________________________________________________________
# Напишите генератор, который будет принимать на вход числа и возвращать их сумму. Генератор должен использовать
# инструкцию yield для возврата текущей суммы и должен продолжать принимать новые числа для добавления к сумме.
# Если генератор получает на вход число 0, он должен прекращать работу и вернуть окончательную сумму.
# Напишите программу, которая будет использовать этот генератор для пошагового расчета суммы чисел, вводимых пользователем.
#
# Пример вывода:
# Введите числа для суммирования (0 для окончания):
# Введите число: 3
# Текущая сумма: 3
# Введите число: 5
# Текущая сумма: 8
# Введите число: 2
# Текущая сумма: 10
# Введите число: 0
# Текущая сумма: 10

''' Признак генератора - ключевое слово YIELD, что с английского означает "УСТУПАТЬ". '''

# def sum_numbers():
#     sum = 0
#     while True:
#         next_el = yield sum         # next_el - представляет собой текущую сумму. При этом yield ждет новое число.
#         if next_el == 0:            # если пользователь вводит 0, выводится последняя сумма и программа прекращается.
#             return sum
#         sum += next_el
#
# print('Введите целые числа для суммирования (0 для окончания): ')
# gen = sum_numbers()                 # Вызываю генератор. - Этап формализации генератора с какими-то параметрами.
# next(gen)                           # А тут генератор запускается.
#
# # Поскольку суммирование производится, пока пользователь вводит числа (пока не введет 0), то для этого нужен
# # бесконечный цикл, для чего лучше всего подойдет while.
# while True:
#     try:
#         numb = int(input("Введите целое число: "))
#         result = gen.send(numb)       # Передаю (отправляю) введенное число в генератор.
#         print(f"Текущая сумма: {result}")
#     except ValueError as e_v:
#         notice_v = f"\033[31m{e_v}\033[m"
#         print(f"Число должно быть целым: {notice_v}.")
#     except StopIteration as e_si:
#         print(f"\033[34mОкончательная сумма: {e_si.value}\033[m")
#         break



# ______  Task 2  ____________________________________________________________________________________________________
# Напишите генератор, который будет генерировать бесконечную арифметическую прогрессию. Он должен принимать
# начало прогрессии (необязательно, если не передано, то старт с 1) и шаг прогрессии.

''' Признак генератора - ключевое слово YIELD, что с английского означает "УСТУПАТЬ". '''

# a_1 - 1-ый элемент последовательности.
# d - шаг (разность) прогрессии.
# n - номер элемента в последовательности.

def calculate_arithmetic_progr(a1, d):
    while True:
        a_n = yield a1          # a_n можно убрать, т.к. подсвечен серым, значит
        a1 += d

try:
    n = int(input('Введите количество элементов прогрессии: n = '))
    a_1 = int(input('1-ый элемент прогрессии: a_1 = '))
    d = int(input('  Шаг прогрессии: d = '))
    gen = calculate_arithmetic_progr(a_1, d)            # Вызываю генератор. - Этап формализации генератора с определенными параметрами.
    next(gen)                                           # Запускаю генератор. - Этап обращения к генератору, т.е его запуск.
    for i in range(n - 1):
        result = gen.send(a_1)                          # Передаю (отправляю) введенное число в генератор, а потом и остальные, полученные с пом. генератора.
        print(f"{i + 2}-й элемент прогрессии: a_{i + 2} = {result}")
except ValueError as e_v:
    notice_v = f"\033[31m{e_v}\033[m"
    print(f"Число должно быть целым: {notice_v}.")
finally:
    message = 'Выведены все элементы арифметической прогрессии.'
    print(f'{'.' * len(message)} \n{message}')

