# Home Tasks 8, 14.12.24
# ___ REAL Numbers ___

# ___ Task 1 ___ Palindromic prime.
# Напишите программу, которая запрашивает у пользователя целое число и определяет, является ли оно палиндромом.
# Число является палиндромом, если оно читается одинаково слева направо и справа налево.
# Используйте математические операции. Работу со строками использовать нельзя.
import math
# N = int(input(f'Enter an integer number > 10: N = '))
# numb = N
# Подсчитаем количество цифр в числе.
# count = 0                   # Счетчик цифр в числе для определения количества цифр в числе.
# while N > 0:                # Будем делить число N на 10, до тех пор пока частное будет больше 0.
#     x = N % 10              # Остаток от деления на 10 числа N.
#     if x < 1:               # Если остаток от деления лежит в промежутке от 0 до 1, прерываем цикл.
#         break
#     count += 1              # Пока остаток от деления на 10 больше 1, добавляем к счетчику 1.
#     # print(f'{count}')
#     N = N // 10             # Целочисленное деление- Делим число N на 10 и проверяем теперь число в 10 раз меньшее.
# print(f'Количество цифр в числе: {count}.')
# print(f'Порядок числа в десятичном представлении (ln N), т.е. показатель степени при 10: {count - 1}.')


# Order of magnitude - Порядок величины (числа). #  url: https://en.wikipedia.org/wiki/Order_of_magnitude.
# Порядок числа - Можно найти математически по связи понятия порядка числа с показательной и
# обратной к ней логарифмической функцией (https://en.wikipedia.org/wiki/Logarithm).
# Логари́фм числа b по основанию a определяется как показатель степени, в которую надо возвести основание a,
# чтобы получить число b. Обозначение: x = log_a(b), произносится: «логарифм b по основанию a».
# numb_order = math.log1p(N) // math.log10(N)       # Целочисленное деление - показатель степени при 10.
# print(f'Порядок числа N: {numb_order}.')
# a = N // 10                     # Целочисленное деление - дробная часть отбрасывается.
# a_int = int(N // 10)            # Целочисленное деление - дробная часть отбрасывается.
# print(f'Результат выполнения команды int(N // 10), т.е. выделения целой части \nот целочисленного деления на 10: a = {a}, '
#       f'- это ТО ЖЕ САМОЕ, что просто N // 10: a_int = {a_int}.')
# b = N % 10                      # Остаток от деления на 10.
# print(f'Остаток от деления на 10: {b}.')
# x = b * 10 ** numb_order
# print(x)

# numb_order = int(math.log10(N))                 # Берем только целую часть от log10(N) - Показатель степени при 10.
# print(f'Порядок числа N: {numb_order}.')
# i = numb_order                                  # Для корректности начала работы цикла.
# inv_N = 0
# while N > 0:
#     b = N % 10
#     inv_N = inv_N + b * 10 ** i
#     # print(inv_N)
#     i -= 1
#     N = N // 10
# print(f'Inverse number: {inv_N}.')
# if numb / inv_N == 1:
#     print(f'Число {numb} является палиндромом.')
# else:
#     print(f'Число {numb} НЕ является палиндромом.')

# ___ OPTIMISED CODE ___
# _ NB! _  import math
# N = int(input(f'Enter an integer number > 10: N = '))
# # print(N % 10)
# numb = N                               # Переприсваиваем другому имени величину числа, чтобы вывести его в конце работы программы  для сравнения с полученным.
# i = int(math.log10(N))                 # Вычисляем порядок числа. int - Берем только целую часть от log10(N) - Показатель степени при 10.
# print(f'Порядок числа N: {i}.')
# inv_N = 0                              # Инициируем сумму произведений на соответствующий порядок остатков от деления N на 10.
# while N > 0:
#     b = N % 10                         # Для определения первого числа в сумме (инвертированном числе), которое является остатком от деления начального, умноженного на 100.
#     inv_N = inv_N + b * 10 ** i        # Собственно первое число в инвертированном числе.
#     # print(inv_N)
#     i -= 1                             # Уменьшаем порядок на 1, т.е. в 10 раз уменьшаем множитель для следующего числа в сумме.
#     N = N // 10                        # Берем следующее число, чтобы найти остаток от деления. Просто уменьшаем начальное в 10 раз.
# print(f'Inverse number: {inv_N}.')
# if numb / inv_N == 1:                  # Проверяем полученное инвертированное число.
#     print(f'Число {numb} является палиндромом.')
# else:
#     print(f'Число {numb} НЕ является палиндромом.')

# ________________ Klementii ___________________
# num = int(input(f'Enter an integer number > 10: n = '))
# rev = 0
# i = num
# while i > 0:
#     rev = rev * 10 + i % 10
#     i = i // 10
# print(num, rev)
# print(f'Число {num} является палиндромом.' if num == rev
#       else 'Число {num} НЕ является палиндромом.')
# ______________________________________________


# ___ Task 2 ___ Narcissistic number or Armstrong number.
# Напишите программу, которая запрашивает у пользователя целое число и проверяет, является ли оно числом Армстронга.
# Число Армстронга - это число, которое равно сумме своих цифр, возведенных в степень, равную количеству цифр в числе.
# url: https://en.wikipedia.org/wiki/Narcissistic_number.
# N = int(input(f'Enter an integer number: N = '))
# numb = N                               # Переприсваиваем другому имени величину числа, чтобы вывести его в конце работы программы для сравнения с полученным.
# i = int(math.log10(N)) + 1             # Вычисляем порядок числа + 1 = Показатель степени каждой цифры в чи. int - Берем только целую часть от log10(N).
# print(f'Порядок числа N: {i}.')
# armstr_N = 0                           # Инициируем сумму своих цифр, возведенных в степень, равную количеству цифр в числе.
# while N > 0:
#     b = N % 10                         # Для определения первого числа в сумме (по-сути, выделяем последнюю цифру в числе), которое является остатком от деления начального.
#     armstr_N = armstr_N + b ** i       # Собственно первое число в сумме чисел по формуле числа Армстронга.
#     print(armstr_N)
#     N = N // 10                        # Берем следующее число, чтобы найти остаток от деления. Просто уменьшаем начальное в 10 раз.
# print(f'The number by Armstrong\'s equation for Narcissistic number: {armstr_N}.')
# if numb - armstr_N == 0:                # Проверяем полученное число.
#     print(f'The number {numb} is an Armstrong (Narcissistic) number.')
# else:
#     print(f'The number {numb} is NOT an Armstrong (Narcissistic) number.')
