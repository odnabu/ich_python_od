# Home Work 17, 29.01.25
# ___ 32: Вложенные функции. Лямбда-функции. ___
# Normal  \033[0;__;__m \033[m    or   BOLD  \033[1;__;__m \033[m
# print('#' * 115)      # Для разделения блоков на листе с кодом:
# ###################################################################################################################
# f = 40; f = '.' * f; print(f) - Filler up to.
# print(f, f'\n...')
# print(' ' * 5, f'...') - Indentation in the output of the result
# while True:
#   ...
#   ask = input("\nDo you want to continue? (y/n): ").lower()
#   if ask == 'n':
#       break
# def input_numb_list():
#     numb_list = [int(x) for x in input('Enter a list of numbers separated by space: ').split()]
#     return numb_list
print('.' * 120)

# =======  ВОПРОСЫ  ==================================================================================================
#   1)  Терминологический аппарат: что в Пайтоне понимается под параметрами и значениями?
#       Есть ли между ними разница?
# COPILOT:
#   \\ Параметры // — это переменные, объявленные в определении функции, которые задают формальные места
#   для входных данных. Параметры указываются в круглых скобках сразу после имени функции.
#       def greet(name):
#           print(f"Hello, {name}!")
#   В этом примере name — это параметр функции greet.
#   \\ Аргументы // — это фактические значения, передаваемые функции при её вызове.
#   Они занимают место параметров и передают данные в функцию.
#       greet("Olya")
#   Здесь "Olya" — это аргумент, который передается параметру name.
#   \\ Значения // в Python — это фактические данные, хранящиеся в переменных или передаваемые в функции
#   через аргументы. Значения могут быть различных типов: числа, строки, списки, словари и т.д.
#   Пример с параметрами и аргументами:
#       def add(a, b):          # a и b — это параметры
#           return a + b
#
#       result = add(3, 5)      # 3 и 5 — это аргументы
#       print(result)           # Вывод: 8
#   В этом примере:
#       - a и b — это параметры функции add.
#       - 3 и 5 — это аргументы, переданные параметрам a и b.
#       - Значение — это результат вычисления, возвращаемый функцией add, в данном случае 8.
#
#   1)  В чем разница между параметрами и объектами в Пайтоне. - См. ответ от Копилота ниже.

# _____________________________________    Task 1    _____________________________________
# Напишите программу, которая принимает список чисел от пользователя и передает его в функцию modify_list,
# которая изменяет элементы списка. Функция должна умножить нечетные числа на 2, а четные числа разделить на 2.
# Выведите измененный список на экран. Объясните, почему изменения происходят только внутри функции и
# как работают изменяемые и неизменяемые параметры.
#   Пример вывода:
#       Введите список чисел, разделенных пробелами: 1 2 3 4 5
#       Измененный список чисел: [2, 1, 6, 2, 10]

# 1) почему изменения происходят только внутри функции:
#       потому что функция оперирует локальными переменными, которые не меняют значения глобальных,
#       если не пользоваться методом global.
# 2) как работают изменяемые и неизменяемые параметры:
#       Думаю, тут стоит сначала разобраться в терминологическом аппарате.
#       Параметры — это переменные, объявленные в определении функции, которые задают формальные места
#       для входных данных. Параметры указываются в круглых скобках сразу после имени функции.
#       При передаче изменяемых объектов в функцию, изменения, внесенные в объект внутри функции,
#       будут видны вне функции. При передаче неизменяемых объектов в функцию, любые изменения внутри функции
#       не затронут исходный объект вне функции. Вместо этого будет создан новый объект.
#       Значит, в самом вопросе есть некорректность - что имеется ввиду: параметры или объекты?
#       Поскольку мне не известно, как параметры функции могу быть изменяемыми или неизменяемыми.
#       ИТОГО: либо я неверно понимаю терминологию, либо вопрос некорректен в рамках существующей терминологии.
#
#       Изменяемые и неизменяемые объекты:
#       Изменяемые объекты (Mutable) — это объекты, которые можно изменять после создания.
#       Основные изменяемые типы данных в Python включают:
#           - Списки (list)
#           - Словари (dict)
#           - Множества (set)
#           - Объекты, созданные с использованием классов.
#       Неизменяемые объекты (Immutable) — это объекты, которые нельзя изменять после создания.
#       Основные неизменяемые типы данных в Python включают:
#           - Числа (int, float, complex)
#           - Строки (str)
#           - Кортежи (tuple)
#           - Замороженные множества (frozenset).
#       Параметры функций:
#       Когда мы передаем параметры в функции, важно понимать, что происходит с изменяемыми и неизменяемыми объектами.
#       Изменяемые параметры - при передаче изменяемых объектов в функцию, изменения, внесенные в объект
#       внутри функции, будут видны вне функции.
#       Неизменяемые параметры - при передаче неизменяемых объектов в функцию, любые изменения внутри функции
#       не затронут исходный объект вне функции. Вместо этого будет создан новый объект.
#       FACIT:
#       Когда передается параметр в функцию, важно понимать, является ли он изменяемым или неизменяемым:
#           - Изменяемые параметры (списки, словари и т.д.) могут быть изменены внутри функции,
#             и эти изменения будут видны снаружи.
#           - Неизменяемые параметры (числа, строки и т.д.) не будут изменены внутри функции;
#             вместо этого будет создан новый объект.

# Неизменяемые (immutable) типы данных — это типы данных, такие как числа, строки и кортежи,
# которые передаются в функцию по значению, то есть создается копия значения параметра.

# Изменяемые (mutable)  типы данных — это типы данных, такие как списки и словари,
# передаются по ссылке, и функция может изменить их содержимое.

# __ 1-st Variant __ REVISED by Taniya ___ See Les35.
# list_numb = [1, 2, 3, 4, 5]
# # # print(list_numb, id(list_numb))
# def modify_list(numb):
#     new_list = []
#     for n in numb:
#         if n % 2 != 0:                        # Можно вынести результат в переменную -->
#             result = n * 2
#             # new_list.append(int(n * 2))
#             # print(new_list)
#         # elif n % 2 == 0:
#         else:
#             result = n // 2
#             # new_list.append(int(n / 2))       # Лучше использовать целочисленное деление: т.е. n // 2.
#             # print(new_list)
#         new_list.append(int(result))
#     return new_list
#
# # # print(modify_list(list_numb), id(modify_list(list_numb)))
# print(modify_list(list_numb))

# __ 1-st Variant __ MY
# list_numb = [1, 2, 3, 4, 5]
# # # print(list_numb, id(list_numb))
# def modify_list(numb):
#     new_list = []
#     for n in numb:
#         if n % 2 != 0:
#             new_list.append(int(n * 2))
#             # print(new_list)
#         # elif n % 2 == 0:
#         else:
#             new_list.append(int(n / 2))
#             # print(new_list)
#     return new_list
#
# # # print(modify_list(list_numb), id(modify_list(list_numb)))
# print(modify_list(list_numb))

# __ 2-nd Variant __
# numbers_list = [1, 2, 3, 4, 5]
# def modify_list(list_numb):
#     changed_numb_list = [int(n * 2) if n % 2 != 0 else int(n/2) for n in list_numb]
#     return changed_numb_list
#
# print(modify_list(numbers_list))

# __ 2-nd Variant __    REVISED by Taniya ___ See Les35.
# numbers_list = [1, 2, 3, 4, 5]
# def modify_list(list_numb):
#     list_numb = [n * 2 if n % 2 != 0 else n // 2 for n in list_numb]    # С // код короче. +++
#     return list_numb                                                    # +++ Такое же имя, как в аргументе самой функции.
#
# modify_list(numbers_list)
# print(modify_list(numbers_list))


# _____________________________________    Task 2    _____________________________________
# Напишите программу, которая принимает произвольное количество аргументов от пользователя и
# передает их в функцию calculate_sum, которая возвращает сумму всех аргументов.
# Используйте оператор * при передаче аргументов в функцию. Выведите результат на экран.
#   Пример вывода:
#       Введите числа, разделенные пробелами: 1 2 3 4 5
#       Сумма чисел: 15
# Это задание действительно было простым?
# numbers = [1, 2, 3, 4, 5]
# # print(sum(numbers))

# def calculate_sum(*args):
#     return sum(args)
# print(calculate_sum(1, 2, 3, 4, 5))
# culc_sum = lambda *yor_numb: sum(yor_numb)          # See __ VIDEO 0:0:35 __ ???????????????????????


# def apply_func(func, numbers):
#     return [func(num) for num in numbers]
#
# result = apply_func(lambda x: x + 10, [5, 8, 3])
# print(result)
