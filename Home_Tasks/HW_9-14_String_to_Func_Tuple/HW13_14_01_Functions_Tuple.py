# Home Work 13, 14.01.25
# ___ FUNCTIONS ___ +++ ___ Tuple ( КОРТЕЖИ ) ___
# Normal  \033[0;__;__m \033[m    or   BOLD  \033[1;__;__m \033[m
# print('#' * 115)      # Для разделения блоков на листе с кодом:
# ###################################################################################################################
# f = 40; f = '.' * f; print(f) - Filler up to.
# print(f, f'\n...')
# print(' ' * 5, f'...') - Indentation in the output of the result
# while True:
#   ...
#   ask = input("\nDo you want to continue? (y/n): ").lower()
#   if ask == 'n':
#       break
print('.' * 120)

# ___ Task 1 ___
# Напишите программу, которая принимает два числа и возвращает их сумму и произведение в виде кортежа (sum, product).
# Используйте функцию для вычисления суммы и произведения. Выведите результат на экран с помощью команды print.

# __ 1-st Variant - NOOOOOO __
# def sum_n(n1, n2):
#     return n1 + n2
# def prod_n(n1, n2):
#     return n1 * n2
# input_n1 = float(input('Enter 1-st number: '))
# input_n2 = float(input('Enter 2-nd number: '))
# s_n = [sum_n(input_n1, input_n2)]
# p_n = [prod_n(input_n1, input_n2)]
# kort = zip(s_n, p_n)
# print(list(kort))

# __ 2-nd Variant  - NOOOOOO __
# def sum_prod(n1, n2):
#     return zip([n1 + n2], [n1 * n2])
# print(list(sum_prod(input_n1, input_n2)))


# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%% _________ Кортежи (тип tuple) __________ %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# See https://skillbox.ru/media/code/chto-takoe-kortezhi-v-python-i-kak-ikh-ispolzovat/.
# Кортежи (тип tuple) — это неизменяемый тип данных в Python, который используется
# для хранения упорядоченной последовательности элементов.
# Кортеж, по сути - неизменяемый список.

# У этих коллекций есть три свойства:
#   - Неизменяемость. После того как кортеж создан, в него нельзя добавлять элементы, а также изменять их или удалять.
#     При попытке это сделать интерпретатор выдаст ошибку TypeError.
#   - Упорядоченность. Элементы кортежа располагаются в определённом порядке, который тоже неизменяем.
#     К любому элементу можно обратиться по его индексу (порядковому номеру).
#   - Элементами кортежа могут быть объекты разных типов данных: числа, строки, списки, другие кортежи и другие.
#     Элементы-коллекции могут иметь неограниченную глубину вложенности.
#     Например, кортеж может включать в себя список, который будет содержать другой список,
#     который вновь будет содержать список и так далее.

# Применение кортежей связано с их свойствами — неизменяемостью и строгим порядком элементов.
# Если нужно защитить данные от случайного или намеренного изменения, то можно использовать кортежи.
# Например, этот тип данных подойдёт для сохранения информации о датах рождения клиентов.
# NB! неизменяемость кортежей не абсолютна. У неё есть исключение — если внутри кортежа находятся изменяемые элементы,
# например списки, словари или множества, то их значения можно изменить.

# Кортежи занимают в памяти меньше места, чем списки:
# a = (10, 20, 30, 40, 50, 60) # Кортеж
# b = [10, 20, 30, 40, 50, 60] # Список
# print(a.__sizeof__()) # Размер кортежа
# print(b.__sizeof__()) # Размер списка

# Кортежи записываются с использованием круглых скобок ():
#      See https://pythonworld.ru/tipy-dannyx-v-python/kortezhi-tuple.html.
#  And see https://skillbox.ru/media/code/chto-takoe-kortezhi-v-python-i-kak-ikh-ispolzovat/.
# a = tuple()           # С помощью встроенной функции - оператора упаковки tuple().
# a = ()                # С помощью литерала кортежа.
# a = ('s', )           # Все дело - в запятой. Сами по себе скобки ничего не значат, точнее, значат то,
#                       # что внутри них находится одна инструкция, которая может быть отделена пробелами,
#                       # переносом строк и прочим мусором. Если запятую не поставить, то получим объект типа int.
# a = 's',              # Кортеж можно создать и так.
# Но все же не увлекайтесь, и ставьте скобки, тем более, что бывают случаи, когда скобки необходимы.

# Кортежи могут состоять из элементов разных типов и их сочетаний:
# numbers_tuple = (1, 2, 3, 4, 5, 2.5, 3 + 4j)                              # Кортеж из чисел, в том числе с плавающей точкой и комплексных
# fruits_tuple = ('яблоко', 'банан', 'апельсин')                            # Кортеж из строк.
# my_tuple = (True, False)                                                  # Кортеж из логических значений.
# nested_tuple = ((1, 2), ('a', 'b'))                                       # Кортеж из других кортежей.
# my_tuple = ([1, 2, 3], ['a', 'b', 'c'])                                   # Кортеж из списков.
# my_tuple = ({'name': 'Alice', 'age': 30}, {'name': 'Bob', 'age': 25})     # Кортеж из словарей.
# mixed_tuple = (1, 'hello', [1, 2, 3], {'a': 10})                          # Кортеж из разных типов данных.

# my_tuple = (1, 2, 3, 4, 5)                # Проверка, содержится ли число 3 в кортеже.
# print(3 in my_tuple)                      # Вывод: True.
# for element in my_tuple:                  # Перебор элементов кортежа с помощью цикла for.
#     print(element)
# i = 0                                     # Перебор элементов кортежа с помощью цикла while.
# while i < len(my_tuple):
#     print(my_tuple[i])
#     i += 1

# del my_tuple                              # Удаление кортежа.

# my_list = list(my_tuple)                  # Преобразование кортежа в список.
# print('Кортеж:', my_tuple)
# print('Список:', my_list)

# my_string = ''.join(map(str, my_tuple))   # Преобразование кортежа в строку.
# print('Кортеж:' my_tuple)
# print('Строка:', my_string)

# my_set = set(my_tuple)                    # Преобразование кортежа во множество, при котором ...
# print('Кортеж:', my_tuple)                # ... удаляются повторяющиеся элементы.
# print('Множество:', my_set)


# __ 1-st Variant - CORRECT ! __
# def sum_n(n1, n2):
#     return n1 + n2
# def prod_n(n1, n2):
#     return n1 * n2
# input_n1 = float(input('Enter 1-st number: '))
# input_n2 = float(input('Enter 2-nd number: '))
# s_n = sum_n(input_n1, input_n2)
# p_n = prod_n(input_n1, input_n2)
# print(f'Summ and Product of numbers {input_n1} and {input_n2}:', (s_n, p_n))

# __ 2-nd Variant  - CORRECT ! __
# def sum_prod(n1, n2):
#     return (n1 + n2, n1 * n2)
# print(f'Summ and Product of numbers {input_n1} and {input_n2}:', sum_prod(input_n1, input_n2))
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

# ___ Task 2 ___
# Напишите программу, которая принимает список чисел и возвращает сумму, минимальное и максимальное значение из списка.
# Используйте функцию для обработки списка чисел и возврата трех значений.
# Выведите результат на экран с помощью команды print.
# input_list = 1, 2, 3
def sum_min_max(list_num):
    return sum(list_num), min(list_num), max(list_num)
input_list = input('Enter numbers separated by space: ').split()        # .split() == .split(' ')
input_list = [(float(i)) for i in input_list]           # 1-st Method of converting a set of symbols to list.
# input_list = list(map(int, input_list))               # 2-nd Method of converting a set of symbols to list.
# print(input_list)
print(f'Summ of numbers is \033[1;33m{sum_min_max(input_list)[0]}\033[m.\n'
      f'Minimum value is \033[1;34m{sum_min_max(input_list)[1]}\033[m.\n'
      f'Maximum value is \033[1;31m{sum_min_max(input_list)[2]}\033[m.')





