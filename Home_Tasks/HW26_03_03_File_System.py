# Home Work 26, 03.03.25
""" ___ 50-51: File System ___ """
# Video Lesson 50: ______________________
# Video Practice 51: _______________________
# Normal  \033[0;__;__m \033[m    or   BOLD  \033[1;__;__m \033[m
# print('#' * 115)      # Для разделения блоков на листе с кодом:
""" ############################################################################################################### """
# f = 40; f = '.' * f; print(f) - Filler up to.
# print(f, f'\n...')
# print(' ' * 5, f'...') - Indentation in the output of the result
# while True:                      # __ NB! __ See HW14_16_01_Func_Tuple.py, Task 2, "___ Clear code..."
#   ...
#   ask = input("\nDo you want to continue? (y/n): ").lower()
#   if ask == 'n':
#   # if user_n == 'Stop'.lower():
#       break
# def input_numb_list():            #  __ NB! __ See HW16_23_01_List_Matrix.py
#     numb_list = [int(x) for x in input('Enter a list of numbers separated by space: ').split()]
#     return numb_list
# ------------------------ SHORTCUTS ------------------------
# Ctrl + W - выделить текущий блок. если нажимать это сочетание дальше, то будут выделяться родительские блоки.
# Ctrl+Y - Удаление всей строки. Кстати, команда копирования Ctrl+C без выделения также работает для всей строки.
# Alt+Enter - Привести код к принятым стандартам (для Python - PEP8).
# Ctrl+R — Изменить название класса/функции и т. п. по всему проекту.
# Shift + F6 - заменить имя элемента во всех частях во всех файлах.
# -----------------------------------------------------------
print('.' * 130)


part_1 = '______ Task 1 _____'
""" ______  Task 1  ______________________________________________________________________________________________ """
# Напишите программу, которая принимает в качестве аргумента командной строки путь к файлу .py и
# запускает его. При запуске файла программа должна выводить сообщение "Файл <имя файла>
# успешно запущен". Если файл не существует или не может быть запущен, программа должна вывести
# соответствующее сообщение об ошибке.

# # +++++++++++++++++
# import os
# import sys
# import subprocess
# # +++++++++++++++++
#
# # sys.argv позволяет получить доступ к аргументам командной строки и использовать его для
# # проверки, передан ли второй аргумент (путь к файлу).
# args = sys.argv             # Считывание аргументов командной строки (команд, введенных в консоли).
#
# # Собственно проверка, передан ли путь к файлу:
# if len(args) != 2:
#     print("\033[31mОшибка:\033[m Укажите путь к файлу .py в качестве аргумента.")
# else:
#     file_path = args[1]     # Получение пути к файлу.
#     # Проверяю, существует ли файл:
#     if not os.path.isfile(file_path):                           # os.path.isfile(file_path) для проверки, существует ли файл.
#         print(f"\033[31mОшибка:\033[m Файл '{file_path}' не существует.")     # Если файла нет или он не имеет расширения .py, выводим сообщение об ошибке.
#     elif not file_path.endswith(".py"):
#         print(f"\033[31mОшибка:\033[m Файл '{file_path}' не является Python-скриптом (.py).")
#     else:
#         try:
#             # Пробую запустить файл:
#             subprocess.run(["python", file_path], check=True)
#             print(f"\033[40;32mФайл '{file_path}' успешно запущен.\033[m")
#         except subprocess.CalledProcessError as e:
#             print(f"\033[31mОшибка:\033[m Файл '{file_path}' не удалось запустить: {e}")
#         except Exception as e:
#             print(f"\033[31mПроизошла ошибка:\033[m {e}.")

# В консоли ввести команду с указанием:
#       - относительного (Path from Content Root),
#    или
#       - абсолютного адреса файла, если он лежит по адресу, отличному от адреса текущего проекта.
# В команде в консоли:
#       python runner.py example.py
#   1-ый файл - тот что запускает runner.py (в данном случае ЭТОТ - Home_Tasks/HW26_03_03_File_System.py),
#   2-ой файл - тот кого запускают test.py (Home_Tasks/HW23_20_02_Iter-Generators.py).
#       python Home_Tasks/HW26_03_03_File_System.py Home_Tasks/HW23_20_02_Iter-Generators.py
# Если файл test.py существует и может быть запущен, будет выводится сообщение:
# Файл 'test.py' успешно запущен.

part_2 = '______ Task 2 _____'
""" ______  Task 2  ______________________________________________________________________________________________ """
# Напишите программу, которая принимает в качестве аргумента командной строки путь к директории и
# выводит список всех файлов и поддиректорий внутри этой директории. Для этой задачи используйте
# модуль os и его функцию walk. Программа должна выводить полный путь к каждому файлу и директории.

# +++++++++++++++++
import os                   # Для работы с файловой системой.
import sys                  # Для получения аргументов командной строки.
# +++++++++++++++++

# Проверка, что передан аргумент командной строки с путем к директории:
if len(sys.argv) != 2:
    print("\033[31mОшибка:\033[m Укажите путь к директории в качестве аргумента.")
    sys.exit(1)
# Получение пути к директории из аргумента командной строки:
directory_path = sys.argv[1]
# Проверка, существует ли директория по указанному пути:
if not os.path.isdir(directory_path):
    print(f"\033[31mОшибка:\033[m '{directory_path}' не является допустимой директорией.")
    sys.exit(1)
# Использование os.walk для обхода директории:
print(f"{'.' * 50}\n"
      f"Содержимое директории '{directory_path}':")
for root, dirs, files in os.walk(directory_path):       # Возвращает три значения для каждой итерации в цикле for.
    print(f"\n\033[32mПуть:\033[m {root}")                            # 1) - Здесь возвращается текущая директория.
    for dir_name in dirs:                               # 2) - Здесь - список поддиректорий в текущей директории.
        print(f"  \033[34mПоддиректория:\033[m {os.path.join(root, dir_name)}")       # os.path.join - выводит для каждого подкаталога и файла их полный путь.
    for file_name in files:                             # 3) - Список файлов в текущей директории.
        print(f"  \t\033[35mФайл:\033[m {os.path.join(root, file_name)}")

# Далее выполняю команду в терминале/консоли:
#       python Home_Tasks/HW26_03_03_File_System.py Home_Tasks
# - где:
#       - Home_Tasks/HW26_03_03_File_System.py - собственно ЭТОТ файл со скриптом.
#       - Home_Tasks - /путь/к/директории.

